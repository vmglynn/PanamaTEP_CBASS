##Script used to run GenPipes on the Digital Research Alliance of Canada's High Performance Computing (HPC). Link to GenPipes DNA Sequencing Pipeline: https://genpipes.readthedocs.io/en/latest/user_guide/pipelines/gp_dnaseq.html

module load mugqic/genpipes/3.6.2 mugqic/python/2.7.14 

ls $MUGQIC_INSTALL_HOME/genomes/species

ls $MUGQIC_INSTALL_HOME/genomes/species/Pocillopora_damicornis.GCF_003704095.1

####Run in sanity check mode to make sure all files/dependencies needed are there

dnaseq.py -t mugqic -c $MUGQIC_PIPELINES_HOME/pipelines/dnaseq/dnaseq.base.ini $MUGQIC_PIPELINES_HOME/pipelines/dnaseq/dnaseq.cedar.ini /cvmfs/soft.mugqic/CentOS6/genomes/species/Pocillopora_damicornis.GCF_003704095.1/Pocillopora_damicornis.GCF_003704095.1.UCSC2019-08-07.ini -r FINAL_Readset_Pdam_GenPipes_6Dec2021_Francoisedit_v3.txt -s 2-7,9-17 --sanity-check --no-json --report > dnaseqCommands_fullsteps6Jan2022_mugqic.sh  

bash dnaseqCommands_fullsteps6Jan2022_mugqic.sh

## VCF statistics for downstream QC

### First let's preliminarily filter SNPs from GenPipes' vcf file on the basis of variant missingess (max-missing), minor allele count (MAC), and quality score (Q)  

#!/bin/bash
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=40
#SBATCH --mem=125G    
#SBATCH --account=def-barrett   
#SBATCH --time=02:00:00   
#SBATCH --output=%x-%j.out      
module load StdEnv/2020 gcc/9.3.0 r/4.0.2 vcftools  

vcftools --gzvcf allSamples.hc.vcf.gz --max-missing 0.5 --mac 3 --minQ 30 --recode --recode-INFO-all --out raw.g5mac3

### Now let's calculate key metrics for downstream visualization in our script, vcftools_CORALstatistics_25Feb2022.Rmd, (closely following  the page "Speciation & Population Genomics: a how-to-guide
" by Joana Meier & Mark Ravinet https://speciationgenomics.github.io/filtering_vcfs/)

#!/bin/bash
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=40
#SBATCH --mem=125G    
#SBATCH --account=def-barrett   
#SBATCH --time=06:00:00   
#SBATCH --output=%x-%j.out      
module load StdEnv/2020 gcc/9.3.0 r/4.0.2 vcftools  
module load StdEnv/2020 gcc/9.3.0 r/4.0.2 vcftools  

vcftools --gzvcf coral_only_bcftools_24Feb2022.vcf.gz  --freq2 --out CORALsamples_allelefreq --max-alleles 2

vcftools --gzvcf coral_only_bcftools_24Feb2022.vcf.gz  --depth --out CORALsamples_mindepth
 
vcftools --gzvcf coral_only_bcftools_24Feb2022.vcf.gz --site-mean-depth --out CORALsamples_site_mindepth

vcftools --gzvcf coral_only_bcftools_24Feb2022.vcf.gz --site-quality --out CORALsamples_sitequal

vcftools --gzvcf coral_only_bcftools_24Feb2022.vcf.gz --missing-indv --out CORALsamples_missindi

vcftools --gzvcf coral_only_bcftools_24Feb2022.vcf.gz--missing-site --out CORALsamples_misssite

vcftools --gzvcf coral_only_bcftools_24Feb2022.vcf.gz --het --out CORALsamples_het

###Based on the findings from our script vcftools_CORALstatistics_25Feb2022.Rmd, we then can filter our data further: 

!/bin/bash
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=40
#SBATCH --mem=125G    
#SBATCH --account=def-barrett   
#SBATCH --time=06:00:00   
#SBATCH --output=%x-%j.out      
module load StdEnv/2020 gcc/9.3.0 r/4.0.2 vcftools 

vcftools --gzvcf coral_only_bcftools_24Feb2022.vcf.gz \
--remove-indels --maf 0.1 --max-missing 0.2 --minQ 30 \
--min-meanDP 3 --max-meanDP 5 \
--minDP 3 --maxDP 5 --recode --stdout | gzip -c > \
coral_onlyFILTER_bcftools_25Feb2022.vcf.gz

###Rename samples so each name is encoded as REEF_GULF_YEAR

#!/bin/bash
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=40
#SBATCH --mem=125G    
#SBATCH --account=def-barrett   
#SBATCH --time=01:00:00   
#SBATCH --output=%x-%j.out      
module load StdEnv/2020 gcc/9.3.0 bcftools/1.13 

bcftools reheader -s newnames_28Feb2022.txt -o coral_onlyFILTER_rename_28Feb2022.vcf coral_onlyFILTER_bcftools_25Feb2022.vcf
 
zcat coral_onlyFILTER_rename_28Feb2022.vcf.gz  |head -n5000|tail -n1000|egrep "^#CHROM"|tr '\t' '\n' > samplesnames.txt 

### ADMIXTURE analyses for all samples today; I closely followed the tutorial by Tyler Smith: https://plantarum.ca/2021/06/01/admixture/

#### First create PLINK file, with loci under potential linkage disiquilibrium (LD) pruned 

#!/bin/bash
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=40
#SBATCH --mem=125G
#SBATCH --account=def-barrett
#SBATCH --time=06:00:00
#SBATCH --output=%x-%j.out
module --force purge
module load StdEnv/2020  plink/2.00-10252019-avx2


plink2 --vcf coral_onlyFILTER_bcftools_25Feb2022.vcf --make-bed --out pop.admix --allow-extra-chr 0 -max-alleles 2 --min-alleles 2


### Run ADMIXTURE with cross-validation (CV) step, for K number of clusters 1-12 

#!/bin/bash
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=40
#SBATCH --mem=125G
#SBATCH --account=def-barrett
#SBATCH --time=10:00:00
#SBATCH --output=%x-%j.out
module --force purge
module load StdEnv/2020  plink/2.00-10252019-avx2


for K in `seq -w 1 12`
do
    admixture_linux-1.3.0/admixture --cv pop.admix.bed $K > ktests/k${K}.out


done

###Let's inspect the CV results

grep -h CV ktests/*out

CVs <- read.table("CV.csv", sep = " ")
CVs <- CVs[, 3:4] ## drop the first two columns
## Remove the formatting around the K values:
CVs[, 1] <- gsub(x = CVs[, 1], pattern = "\\(K=",
                replacement = "")
CVs[, 1] <- gsub(x = CVs[, 1], pattern = "\\):",
                replacement = "") 
head(CVs)


plot(CVs, xlab = "K", ylab = "CV error") 

###Let's re-run ADMIXTURE across mtORF lineages

###First, divide the VCF by mtORF, so mtORF 1 and mtORF 3 comprise two separate files

#### mtORF 1 only vcf file

#!/bin/bash
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=40
#SBATCH --mem=125G    
#SBATCH --account=def-barrett   
#SBATCH --time=01:00:00   
#SBATCH --output=%x-%j.out      
module load StdEnv/2020 gcc/9.3.0 bcftools/1.13 

bcftools view -s ML3837,ML3723,ML3739,ML3741,ML3743,ML3749,ML3766,ML3790,ML3800,ML3813,ML3828,ML3841,ML3725,ML3726,ML3727,ML3729,ML3730,ML3731,ML3732,ML3760,ML3761,ML3762,ML3763,ML3765,ML3768,ML3770,ML3772,ML3775,ML3778,ML3779,ML3781,ML3784,ML3785,ML3788,ML3791,ML3792,ML3796,ML3797,ML3802,ML3807,ML3814,ML3815,ML3822,ML3823,ML3831,ML3843,ML3844,ML3846,ML3848,ML3849,ML3850,ML3851,ML3853,ML3854,ML3856,ML3857,ML3858,ML3860,ML3861,ML3862 coral_onlyFILTER_bcftools_25Feb2022.vcf > mtORF1_coral_onlyFILTER_bcftools_26June2022.vcf

cat mtORF1_coral_onlyFILTER_bcftools_26June2022.vcf|head -n5000|tail -n1000|egrep "^#CHROM"|tr '\t' '\n' > samplesnames_mtORF1_26June2022.txt

##### Create mtORF 1 PLINK file

#!/bin/bash
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=40
#SBATCH --mem=125G
#SBATCH --account=def-barrett
#SBATCH --time=06:00:00
#SBATCH --output=%x-%j.out
module --force purge
module load StdEnv/2020  plink/2.00-10252019-avx2


plink2 --vcf mtORF1_coral_onlyFILTER_bcftools_26June2022.vcf --make-bed --out pop.admix --allow-extra-chr 0 -max-alleles 2 --min-alleles 2

##### Run ADMIXTURE mtORF 1

#!/bin/bash
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=40
#SBATCH --mem=125G
#SBATCH --account=def-barrett
#SBATCH --time=10:00:00
#SBATCH --output=%x-%j.out
module --force purge
module load StdEnv/2020  plink/2.00-10252019-avx2


for K in `seq -w 1 12`
do
    admixture_linux-1.3.0/admixture --cv pop.admix.bed $K > ktests/k${K}.out
 
done

grep -h CV ktests/*out 


#### mtORF 3 only vcf file

#!/bin/bash
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=40
#SBATCH --mem=125G
#SBATCH --account=def-barrett
#SBATCH --time=01:00:00
#SBATCH --output=%x-%j.out
module load StdEnv/2020 gcc/9.3.0 bcftools/1.13


bcftools view -s ML3723,ML3739,ML3741,ML3743,ML3749,ML3766,ML3790,ML3800,ML3813,ML3828,ML3841,ML3725,ML3726,ML3727,ML3729,ML3730,ML3731,ML3732,ML3760,ML3761,ML3762,ML3763,ML3765,ML3768,ML3770,ML3772,ML3775,ML3778,ML3779,ML3781,ML3784,ML3785,ML3788,ML3791,ML3792,ML3796,ML3797,ML3802,ML3807,ML3814,ML3815,ML3822,ML3823,ML3831,ML3843,ML3844,ML3846,ML3848,ML3849,ML3850,ML3851,ML3853,ML3854,ML3856,ML3857,ML3858,ML3860,ML3861,ML3862 coral_onlyFILTER_bcftools_25Feb2022.vcf > mtORF3_coral_onlyFILTER_bcftools_26June2022_FINAL.vcf

#### Create mtORF 3 PLINK file 

#!/bin/bash
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=40
#SBATCH --mem=125G
#SBATCH --account=def-barrett
#SBATCH --time=06:00:00
#SBATCH --output=%x-%j.out
module --force purge
module load StdEnv/2020  plink/2.00-10252019-avx2


plink2 --vcf mtORF3_coral_onlyFILTER_bcftools_26June2022_FINAL.vcf --make-bed --out pop.admix --allow-extra-chr 0 -max-alleles 2 --min-alleles 2


#### Run ADMIXTURE mtORF 3

#!/bin/bash
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=40
#SBATCH --mem=125G
#SBATCH --account=def-barrett
#SBATCH --time=10:00:00
#SBATCH --output=%x-%j.out
module --force purge
module load StdEnv/2020  plink/2.00-10252019-avx2
 
 
for K in `seq -w 1 12`
do
    admixture_linux-1.3.0/admixture --cv pop.admix.bed $K > ktests/k${K}.out
 
done


